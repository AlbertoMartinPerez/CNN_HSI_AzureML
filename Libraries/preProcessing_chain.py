# Import libraries
import numpy as np

####################################################
########## PRE-PROCESSING CHAIN FUNCTIONS ##########
####################################################

# Spectral correction matrix for 650nm filter
matrix650 = np.matrix([
    [-0.123638, -0.0540388, -0.040208, 0.00775416, -0.133549, -0.00888526, 0.000647892, 0.00101151, 0.00345197,
     0.00299808, -0.00877219, -4.44255e-005, -0.00223538, -0.00341204, -0.00312183, -0.0740077, -0.0154072, 0.00285804,
     0.00217558, -0.0169405, 1.61723, -0.0800448, 0.0247248, 0.00851731, -0.10706],
    [-0.0290877, -0.0978787, -0.0457315, -0.0344522, -0.00987472, 0.0017864, -0.00550217, -0.000408022, 0.00690282,
     -0.000808374, -0.0022856, -0.00169059, -0.00103087, -0.00220777, -0.00154527, -0.00477692, -0.0463636, -0.00761789,
     0.00233847, 0.000665279, -0.0009687, 1.26975, -0.00772946, 0.00822911, 0.0102875],
    [-0.0127302, -0.0265028, -0.122456, -0.0729285, -0.00484304, 0.000923428, 0.00293405, -0.00655671, 0.00687449,
     0.00329918, -0.00211072, -0.000525701, -0.00376487, -0.00362395, -0.00203588, 0.00707278, -0.0086283, -0.0495667,
     -0.00853649, 0.000981214, 0.0128843, -0.143566, 1.55649, -0.147033, 0.0239522],
    [-0.00844874, -0.0111612, -0.0186005, -0.109834, -0.00804267, 0.000369261, 0.00104857, 0.00270604, 0.0020216,
     0.000841526, 0.000701221, 0.000437507, -0.00119221, -0.00223717, -0.000707483, 0.0178299, 0.00566204, 0.000399053,
     -0.0335172, -0.0120261, 0.00161577, 0.00578617, -0.0131414, 1.13913, 0.0403617],
    [-0.0314786, -0.0158687, 0.0125533, -0.100539, -0.0541925, -0.000532924, 0.00121942, 0.00152423, 0.0087969,
     -0.00677126, -0.000229824, 0.000145394, -0.00181305, -0.000724636, -0.00255823, 0.0244876, 0.00479963, 0.0109341,
     -0.00158906, -0.0623222, -0.0523385, -0.00525115, 0.0249038, -0.228524, 1.47537],
    [-0.00417314, -0.00300073, 0.00132821, -0.00706325, -0.0030431, -0.00197086, -0.00202149, -0.000538226,
     4.32724e-005, -0.00183062, -0.0372066, -0.00631996, -0.00100402, -0.000102912, -0.0102054, 1.26235, -0.0451744,
     0.0281407, 0.00811465, -0.0666758, -0.0528179, -0.0206383, -0.00777298, -0.0178272, -0.0105947],
    [-0.000837595, -0.00751643, -0.00310367, -0.00877728, -0.00397226, -0.000900362, -0.0052976, -0.00118591,
     0.000557538, -0.00135825, -0.000665353, -0.0526005, -0.0179837, -0.00103582, 0.000252553, -0.100056, 1.27878,
     0.0444848, 0.0116053, 0.00912933, -0.0200927, -0.074633, -0.0315513, -0.0158841, 0.00264058],
    [-0.000404794, -0.00204226, -0.00714649, -0.0183745, -0.00271064, -0.00182459, -0.00246054, -0.00767657,
     -0.000970959, -0.00070212, 0.00919904, -0.00902736, -0.0945323, -0.0204954, -0.00128409, 0.0125435, -0.234913,
     1.69171, -0.0939308, 0.00703095, -0.00971331, -0.0244288, -0.128373, -0.0457875, -0.0136813],
    [0.000582588, -0.00252116, 0.00252168, -0.0195115, -0.00175731, -0.00249831, -0.00280515, -0.000699843, -0.00290232,
     -0.000454231, 0.0303448, 0.00676693, -0.00933069, -0.0483915, -0.0127032, -0.00465606, 0.00288741, -0.0812584,
     1.35036, -0.0504326, -0.00639926, -0.0061956, -0.0207968, -0.0938227, -0.0263234],
    [0.000968954, -0.00526302, 0.00619219, -0.0159331, -0.00679633, -0.0103949, -0.00619415, 0.000760818, -0.0015422,
     -0.00351391, 0.135551, 0.00566414, 0.00233134, -0.00407276, -0.059758, -0.0898075, -0.00946429, 0.010711,
     -0.0914813, 1.2895, -0.0159133, -0.00634987, -0.00775788, -0.0202651, -0.0971739],
    [0.000219157, -0.00944743, 0.00223233, -0.0146308, -0.00467909, -0.111521, -0.0392745, 0.00713564, 0.000625618,
     -0.0214774, 1.75813, -0.110469, 0.00481707, 0.0186204, -0.156486, -0.14486, -0.0538433, -0.00950889, -0.0209512,
     -0.0703251, -0.00940396, -0.00337708, -0.00439485, -0.00186628, -0.00526221],
    [0.00150172, -0.0066017, 0.000218844, -0.0106247, -0.00369618, -0.00689075, -0.104248, -0.0111261, 0.000503176,
     0.000787362, -0.0712488, 1.42268, -0.0836948, 0.0437771, 0.0148477, -0.0277593, -0.0962617, -0.0283119, -0.0105517,
     -0.00659252, 2.27601e-005, -0.0097848, -0.00176081, -0.00125251, -0.00393233],
    [0.00251677, -0.00821153, -6.83583e-006, -0.0116555, -0.00292789, 0.00203844, -0.0209678, -0.0658577, -0.0171394,
     0.00187846, 0.015208, -0.038974, 1.26895, 0.0202996, 0.0200982, -0.00927716, -0.0275015, -0.0745499, -0.0314785,
     -0.00894276, -0.000690919, -0.00189582, -0.00603403, -0.000910754, -0.00396412],
    [0.00450637, -0.01387, 0.00295429, -0.0246662, -0.0038273, -0.0124888, -0.00480523, -0.0177512, -0.112931,
     -0.0257869, -0.00300968, 0.0162743, -0.241335, 1.81331, -0.101231, -0.0096076, -0.0122711, -0.0381417, -0.146084,
     -0.0489189, -0.00104986, -0.0033769, 8.35073e-005, -0.012409, -0.00357099],
    [-6.82281e-005, -0.0137827, 0.0040665, -0.0228404, -0.00492073, -0.022135, -0.0327535, 0.0269206, -0.0141173,
     -0.117696, -0.130732, 0.0029436, -0.0044131, -0.146353, 1.72948, -0.0288312, -0.0105283, -0.0111217, -0.0354499,
     -0.149434, -0.000348422, -0.0031088, -0.00152463, 0.00173689, -0.0149869],
    [-0.0978366, -0.0647626, 0.017185, -0.0305004, -0.00641682, 1.47305, -0.165588, 0.0690921, 0.0107925, -0.117535,
     -0.092908, -0.0207342, -0.011001, 0.000924726, 0.0706397, -0.00642002, -0.00158652, -0.00262969, -0.00447587,
     -0.010167, -0.000848359, -0.000955392, -0.00368082, -0.000429554, -0.00321022],
    [-0.0115153, -0.135001, -0.038633, -0.0057681, -0.00185114, -0.00944089, 1.23947, 0.0875918, 0.00745235, 0.0245603,
     -0.0305564, -0.0811707, -0.0407446, -0.00767644, 0.0251177, -0.000572815, -0.00560961, -0.00180895, -0.00249746,
     -0.00335306, -0.00102481, -0.000647075, -0.00177531, -0.001674, -0.00287],
    [0.0113788, -0.109314, -0.152454, -0.08161, 0.00797012, 0.00150462, -0.24984, 1.88553, -0.0183811, 0.00661804,
     -0.0139649, -0.0276512, -0.171629, -0.0693785, -0.000916626, -0.000753272, 0.000325271, -0.00997296, 0.0019,
     -0.000546892, -0.00308912, 0.000883086, -0.00196806, -0.00071376, -0.00392587],
    [-0.0679814, -0.0908581, -0.00562531, -0.222985, -0.0108389, -0.0197949, -0.0417767, -0.0727247, 1.71663, 0.123338,
     -0.01419, -0.00839106, -0.0330053, -0.173974, -0.0673152, -0.000124574, -0.000844623, 0.000393645, -0.00585674,
     0.00219773, -0.000453452, 1.6266e-005, -0.00193022, -0.000537499, -0.0033629],
    [-0.0131625, -0.157698, 0.0835973, -0.1462, -0.0668098, -0.185263, -0.0185711, -0.0448846, 0.0989411, 1.67974,
     -0.0230799, -0.00509234, -0.00221447, -0.0519142, -0.138106, 0.00184181, -0.000589627, -0.000843117, 0.0013859,
     -0.00403537, -0.00216452, 0.002342, -0.00308584, 0.000823013, -0.00495648],
    [1.29948, 0.003637, -0.0410496, 0.019844, -0.0938076, -0.11276, -0.0456595, -0.00391537, -0.0247809, 0.095385,
     -0.0117047, 0.000896388, 0.000323787, -0.000425201, -0.00968628, -0.00172842, -0.00235524, -0.00191178, -0.001991,
     -0.00169255, -0.043054, -0.0119326, -0.000271147, 0.000487824, -0.0113315],
    [0.240584, 0.825213, 0.0848467, 0.105674, -0.035757, -0.0436881, -0.084, -0.0394016, -0.0247617, 0.0675939,
     -0.00398739, -0.00345612, 0.00171409, -0.000752071, -0.00369276, -0.00151493, -0.00304879, -0.00240566,
     -0.00214151, -0.00127088, -0.0181853, -0.0352663, -0.0143542, -0.0063183, -0.00162289],
    [0.00528932, -0.0916616, 1.24192, 0.234881, -0.0586849, -0.0119382, -0.023109, -0.108419, -0.102092, 0.0255886,
     -0.00179596, 0.00209704, -0.00248304, -0.000505743, 0.00196458, -0.00133078, -0.00260516, -0.00484454, -0.00232898,
     -0.0012423, -0.00627573, -0.0106039, -0.0540266, -0.0283156, 0.000527071],
    [0.0981402, -0.226109, 0.0803823, 1.68048, -0.214996, -0.00626617, 0.00324442, -0.0269682, -0.173474, -0.0591136,
     -0.00220041, 0.00269912, 0.0030313, -0.00856287, 0.00406166, -0.000917856, -0.00261195, -0.00326479, -0.00463836,
     -0.00120815, -0.0190058, 0.00276064, -0.0197827, -0.093734, -0.0119488],
    [0.0330407, 0.0635482, -0.888424, 2.16104, 0.0492287, -0.0051838, -0.00345029, 0.0362445, -0.177542, -0.088811,
     -0.00056219, 0.00108241, 0.00732888, -0.00926203, 0.00132402, 0.000712329, -0.0021256, -0.000727447, -0.00513536,
     -0.000990781, -0.0563558, 0.00469387, 0.0124434, -0.111588, -0.0205243]
])

### HSI CUBE FORMATION
def f_cube(image):
    # f_cube
    #  Convert the snapshot raw image into a cube 
    #  the final order of the bands is the same as the input.
    #  It must be applied an spectral correction
    # input: image [MxN] matrix (uint8 or uint16) (for 8 and 10 bit images)
    # output: image cube [mxnxb] matrix (double)
    filter_height = 1085
    filter_width = 2045
    bands = 25

    return image[:-3,:-3].reshape(filter_height, filter_width//5, 5).transpose(1,0,2).reshape(filter_width//5, filter_height//5, bands).transpose(1,0,2)

### WHITE AND DARK CALIBRATION
def f_calibration(image, imageW, imageD):
    # f_calibration
    #  Calibrate the input 2D image (.tif, .png...) using its white reference 'imageW' and dark reference 'imageD'
    # input: image [MxN] matrix (uint8 or uint16) (for 8 and 10 bit images)
    # output: image cube [mxn] matrix (double)

    # Return calibrated image
    return ((image - imageD)/(imageW - imageD))

### XIMEA SNAPSHOT SPECTRAL CORRECTION
def f_spectral_correction(img_cube, matrix = matrix650):
    # f_spectral_correction
    # Input: 
    #       img_cube    hyperspectral cube from the img
    # Output: 
    #       cubes with the spectral correction as explain in the xispect specifications 
    # Declare the output matrix previous to the loop
    imSpec = np.zeros((img_cube.shape[0], img_cube.shape[1], img_cube.shape[2]))

    for i in range(img_cube.shape[0]):
        for j in range(img_cube.shape[1]):
            # Multiply the input cube with the corresponding correction matrix
            imSpec[i,j,:] = np.matmul(matrix, img_cube[i, j, :])

    return imSpec

### HELICOID NORMALIZATION
def f_norm_helicoid(img_cube):
    # This function computes the normalization as performed in HELICoiD
    # input: image cube [MxNxB] matrix
    # output: image cube normalized [MxNxB] matrix
    
    # Calculates the brightness of each pixel of the cube using all spectral dimensions:
    #
    # 1. np.sum(np.power(image, 2), axis=2) --> Performs the sum of each spectral band (axis=2) to the power of 2.
    #
    # 2. np.shape(image)[2] --> Extracts the number of bands of the image
    pixBrightness = np.sqrt( np.sum(np.power(img_cube, 2), axis=2) / np.shape(img_cube)[2]);
    
    # np.divide(image, pixBrightness) --> Perform the element wise division of the pixel brightness to each pixel
    #imageHelNorm = np.divide(img_cube, pixBrightness);
    # [:, :, None] is added to broadcast properly pixBrigthness into the same dimensions as img_cube. Without it, the following error will appear:
    # "operands could not be broadcast together with shapes (X,Y,Z) (X,Y)""
    imageHelNorm = img_cube/pixBrightness[:, :, None];
                            
    return imageHelNorm